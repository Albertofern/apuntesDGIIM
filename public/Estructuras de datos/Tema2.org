#+TITLE: Apuntes Estructura de datos.
#+AUTHOR:
#+LANGUAGE: es
#+OPTIONS: toc:nil
#+latex_header: \usepackage[spanish]{babel}
#+latex_header: \usepackage[T1]{fontenc}
#+latex_header: \usepackage{amsmath}
#+latex_header: \usepackage[left=2.5cm,top=2cm,right=2.5cm,bottom=2.5cm]{geometry}
#+latex_header: \usemintedstyle{manni}
#+latex_header: \setminted{linenos=true}

#+BEGIN_SRC emacs-lisp :exports results :results silent
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  (setq org-latex-pdf-process
        '("pdflatex --shell-escape %f"))
#+END_SRC

* Estructuras de datos
** Tema 2 - Abstracción.
*** Uso de Template.

Nos permite seleccionar el tipo de dato que vamos a utilizar en tiempo de ejecución.
Declarando:

#+BEGIN_SRC c++
template <class T, int n>

class array_n {
private:
    T items[n];
  };
#+END_SRC

Creando un objeto de esta clase de la forma:

#+BEGIN_SRC c++
array_n<int,1000> w

#+END_SRC
Creando un metodo de la forma:

#+BEGIN_SRC c++
template <class T>
T VectorDinamico::componente(int i) const
{
  return datos[i];
}
#+END_SRC

La compilación a la hora de usar templates es distinta a la que estamos acostumbrados. En lugar de hacer un /#include/ ``/clase.h/'' en el archivo _.cpp_, se incluirá el archivo /#include/ ``/clase.cpp/'' al final del archivo _.h_.

*** Clase vector dinámico

Vamos a estudiar una clase que tenga un vector de datos y el número de elementos.Un primer ejemplo con tipo de dato float sería:

#+BEGIN_SRC c++
class VectorDinamico{

  float* datos;
  int ns;
}
#+END_SRC


***  Iteradores

Pretendemos hacer recorridos mucho más rápido. No volvermos a recorrer vectores haciendo v[i]. Usaremos los punteros para iterar, de la forma:


#+BEGIN_SRC c++

double *v = &a.
double *p;
double * fin;
fin = v+n;
for(p = v; p!= fin; ++p)
  cout << *p << endl;
#+END_SRC

 Nota: en un compilador moderno, simplemente activando la optimización de código se consigue el mismo aumento en el rendimiento.

Definiremos incluso un nuevo tipo de dato llamado iterator, haciéndolo de la forma:

#+BEGIN_SRC c++
typedef double* iterator;
iterator begin(double* v, int n){
  return v;
}
iterator end(double* v, int n){
  return v+n;
}

/**--------------------------*/
iterator p;
for(p=begin(v,n); p!=end(v,n);++p)
  cout << *p << endl;
#+END_SRC

*** Pilas
Son estructuras de datos lineales, secuencias de elementos dispuestos en una dimensión. Tienen estructura /LIFO/ (last in, first out)

No usaremos el concepto de posición, sólo trabajaremos con el tope de la estructura. En realidad, sí podemos recorrerla pero debemos salvaguardar los elementos
, pues para acceder al siguiente elemento tenemos que borrar el anterior.

- Para insertar un elemento, se inserta siempre al principio de la pila, añadiendo físicamente
- Para borrar un elemento, se elimina y el puntero que había al primero se lleva al segundo
- Como la pila no tiene recorridos, no tienen iteradores.
- Las funciones básicas son Tope, Poner, Quitar, Vaciar.

Hay que recordar que los elementos de la pila se guardan en orden contrario al que fueron insertados. Por tanto si los imprimimos, por ser de tipo /LIFO/ salen del 
primero que hemos insertado al último.
En la práctica, usaremos las pilas con Celdas Enlazadas.


#+BEGIN_SRC c++

#ifndef __PILA_H__
#define __PILA_H__

typedef char Tbase;

struct CeldaPila{
    Tbase elemento;
    CeldaPila *sig;
};

class Pila{

    CeldaPila *primera;

  public:

    Pila();
    Pila(const Pila& p);
    ~Pila();
    Pila& operator= (const Pila& pila);

    void poner(Tbase c);
    void quitar();
    Tbase tope() const;
    bool vacia() const;
};

#+END_SRC

*** Colas

Una cola es una estructura de datos lineal en la que lso elementos se suprimen e insertan por extremos opuestos. Son estructuras /FIFO/. 
En una cola, si tenemos dos elementos

Usaremos el operador /%/, que transforma una estructura lineal en una linear circular.
Al igual que en las colas, no tengo acceso a los elementos si no destruimos la cola.
